version: '3.8'

services:
  # Load Balancer (HAProxy)
  load-balancer:
    image: haproxy:2.8-alpine
    container_name: eduverse_load_balancer
    ports:
      - "80:80"
      - "443:443"
      - "8404:8404"  # HAProxy stats
    volumes:
      - ./haproxy/haproxy.cfg:/usr/local/etc/haproxy/haproxy.cfg:ro
      - ./ssl:/etc/ssl/certs:ro
    depends_on:
      - backend-1
      - backend-2
      - backend-3
    networks:
      - eduverse-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8404/stats"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Backend Services (Multiple instances for HA)
  backend-1:
    build:
      context: ../backend
      dockerfile: Dockerfile
      target: production
    container_name: eduverse_backend_1
    environment:
      - DATABASE_URL=postgresql+asyncpg://eduverse_user:${DB_PASSWORD}@postgres-primary:5432/eduverse
      - REDIS_URL=redis://redis-cluster:6379
      - SECRET_KEY=${SECRET_KEY}
      - DEBUG=false
      - WORKER_ID=1
    volumes:
      - ../uploads:/app/uploads
      - ../models:/app/models
      - ../logs:/app/logs
    depends_on:
      - postgres-primary
      - redis-cluster
    networks:
      - eduverse-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 4G
        reservations:
          cpus: '1.0'
          memory: 2G

  backend-2:
    build:
      context: ../backend
      dockerfile: Dockerfile
      target: production
    container_name: eduverse_backend_2
    environment:
      - DATABASE_URL=postgresql+asyncpg://eduverse_user:${DB_PASSWORD}@postgres-primary:5432/eduverse
      - REDIS_URL=redis://redis-cluster:6379
      - SECRET_KEY=${SECRET_KEY}
      - DEBUG=false
      - WORKER_ID=2
    volumes:
      - ../uploads:/app/uploads
      - ../models:/app/models
      - ../logs:/app/logs
    depends_on:
      - postgres-primary
      - redis-cluster
    networks:
      - eduverse-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 4G
        reservations:
          cpus: '1.0'
          memory: 2G

  backend-3:
    build:
      context: ../backend
      dockerfile: Dockerfile
      target: production
    container_name: eduverse_backend_3
    environment:
      - DATABASE_URL=postgresql+asyncpg://eduverse_user:${DB_PASSWORD}@postgres-primary:5432/eduverse
      - REDIS_URL=redis://redis-cluster:6379
      - SECRET_KEY=${SECRET_KEY}
      - DEBUG=false
      - WORKER_ID=3
    volumes:
      - ../uploads:/app/uploads
      - ../models:/app/models
      - ../logs:/app/logs
    depends_on:
      - postgres-primary
      - redis-cluster
    networks:
      - eduverse-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 4G
        reservations:
          cpus: '1.0'
          memory: 2G

  # PostgreSQL Primary-Replica Setup
  postgres-primary:
    image: postgres:15-alpine
    container_name: eduverse_postgres_primary
    environment:
      POSTGRES_DB: eduverse
      POSTGRES_USER: eduverse_user
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_REPLICATION_USER: replicator
      POSTGRES_REPLICATION_PASSWORD: ${REPLICATION_PASSWORD}
    ports:
      - "5432:5432"
    volumes:
      - postgres_primary_data:/var/lib/postgresql/data
      - ./postgres/postgresql.conf:/etc/postgresql/postgresql.conf
      - ./postgres/pg_hba.conf:/etc/postgresql/pg_hba.conf
      - ./postgres/init-primary.sql:/docker-entrypoint-initdb.d/init-primary.sql
    command: postgres -c config_file=/etc/postgresql/postgresql.conf
    networks:
      - eduverse-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U eduverse_user -d eduverse"]
      interval: 10s
      timeout: 5s
      retries: 5

  postgres-replica:
    image: postgres:15-alpine
    container_name: eduverse_postgres_replica
    environment:
      POSTGRES_USER: eduverse_user
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      PGUSER: eduverse_user
      POSTGRES_PRIMARY_HOST: postgres-primary
      POSTGRES_REPLICATION_USER: replicator
      POSTGRES_REPLICATION_PASSWORD: ${REPLICATION_PASSWORD}
    volumes:
      - postgres_replica_data:/var/lib/postgresql/data
      - ./postgres/setup-replica.sh:/docker-entrypoint-initdb.d/setup-replica.sh
    depends_on:
      - postgres-primary
    networks:
      - eduverse-network
    restart: unless-stopped

  # Redis Cluster for High Availability
  redis-cluster:
    image: redis:7-alpine
    container_name: eduverse_redis_cluster
    ports:
      - "6379:6379"
    volumes:
      - redis_cluster_data:/data
      - ./redis/redis.conf:/usr/local/etc/redis/redis.conf
    command: redis-server /usr/local/etc/redis/redis.conf
    networks:
      - eduverse-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Celery Workers for Background Tasks
  celery-worker-1:
    build:
      context: ../backend
      dockerfile: Dockerfile
      target: production
    container_name: eduverse_celery_worker_1
    command: celery -A app.core.celery worker --loglevel=info --concurrency=4 --hostname=worker1@%h
    environment:
      - DATABASE_URL=postgresql+asyncpg://eduverse_user:${DB_PASSWORD}@postgres-primary:5432/eduverse
      - REDIS_URL=redis://redis-cluster:6379
      - SECRET_KEY=${SECRET_KEY}
    volumes:
      - ../uploads:/app/uploads
      - ../models:/app/models
      - ../logs:/app/logs
    depends_on:
      - postgres-primary
      - redis-cluster
    networks:
      - eduverse-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '1.5'
          memory: 3G

  celery-worker-2:
    build:
      context: ../backend
      dockerfile: Dockerfile
      target: production
    container_name: eduverse_celery_worker_2
    command: celery -A app.core.celery worker --loglevel=info --concurrency=4 --hostname=worker2@%h
    environment:
      - DATABASE_URL=postgresql+asyncpg://eduverse_user:${DB_PASSWORD}@postgres-primary:5432/eduverse
      - REDIS_URL=redis://redis-cluster:6379
      - SECRET_KEY=${SECRET_KEY}
    volumes:
      - ../uploads:/app/uploads
      - ../models:/app/models
      - ../logs:/app/logs
    depends_on:
      - postgres-primary
      - redis-cluster
    networks:
      - eduverse-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '1.5'
          memory: 3G

  # Celery Beat for Scheduled Tasks
  celery-beat:
    build:
      context: ../backend
      dockerfile: Dockerfile
      target: production
    container_name: eduverse_celery_beat
    command: celery -A app.core.celery beat --loglevel=info --scheduler django_celery_beat.schedulers:DatabaseScheduler
    environment:
      - DATABASE_URL=postgresql+asyncpg://eduverse_user:${DB_PASSWORD}@postgres-primary:5432/eduverse
      - REDIS_URL=redis://redis-cluster:6379
      - SECRET_KEY=${SECRET_KEY}
    volumes:
      - ../logs:/app/logs
    depends_on:
      - postgres-primary
      - redis-cluster
    networks:
      - eduverse-network
    restart: unless-stopped

  # Celery Flower for Monitoring
  celery-flower:
    build:
      context: ../backend
      dockerfile: Dockerfile
      target: production
    container_name: eduverse_celery_flower
    command: celery -A app.core.celery flower --port=5555
    ports:
      - "5555:5555"
    environment:
      - DATABASE_URL=postgresql+asyncpg://eduverse_user:${DB_PASSWORD}@postgres-primary:5432/eduverse
      - REDIS_URL=redis://redis-cluster:6379
      - SECRET_KEY=${SECRET_KEY}
    depends_on:
      - redis-cluster
    networks:
      - eduverse-network
    restart: unless-stopped

  # Nginx for Static Files and Frontend
  nginx:
    image: nginx:alpine
    container_name: eduverse_nginx
    ports:
      - "8080:80"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/sites-available:/etc/nginx/sites-available:ro
      - ../uploads:/var/www/uploads:ro
      - ../frontend/build/web:/var/www/html:ro
    depends_on:
      - load-balancer
    networks:
      - eduverse-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Elasticsearch for Search and Analytics
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: eduverse_elasticsearch
    environment:
      - cluster.name=eduverse-cluster
      - node.name=eduverse-node-1
      - discovery.type=single-node
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms2g -Xmx2g"
      - xpack.security.enabled=true
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
      - ./elasticsearch/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml:ro
    ports:
      - "9200:9200"
    networks:
      - eduverse-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "curl -u elastic:${ELASTIC_PASSWORD} -f http://localhost:9200/_cluster/health"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Kibana for Log Analysis
  kibana:
    image: docker.elastic.co/kibana/kibana:8.11.0
    container_name: eduverse_kibana
    ports:
      - "5601:5601"
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
      - ELASTICSEARCH_USERNAME=elastic
      - ELASTICSEARCH_PASSWORD=${ELASTIC_PASSWORD}
    volumes:
      - ./kibana/kibana.yml:/usr/share/kibana/config/kibana.yml:ro
    depends_on:
      - elasticsearch
    networks:
      - eduverse-network
    restart: unless-stopped

  # Prometheus for Metrics
  prometheus:
    image: prom/prometheus:latest
    container_name: eduverse_prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./prometheus/rules:/etc/prometheus/rules:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
    networks:
      - eduverse-network
    restart: unless-stopped

  # Grafana for Dashboards
  grafana:
    image: grafana/grafana:latest
    container_name: eduverse_grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-piechart-panel,grafana-worldmap-panel
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning:ro
      - ./grafana/dashboards:/var/lib/grafana/dashboards:ro
    depends_on:
      - prometheus
    networks:
      - eduverse-network
    restart: unless-stopped

  # Jaeger for Distributed Tracing
  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: eduverse_jaeger
    ports:
      - "16686:16686"
      - "14268:14268"
    environment:
      - COLLECTOR_OTLP_ENABLED=true
    volumes:
      - jaeger_data:/tmp
    networks:
      - eduverse-network
    restart: unless-stopped

  # MinIO for Object Storage
  minio:
    image: minio/minio:latest
    container_name: eduverse_minio
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      - MINIO_ROOT_USER=${MINIO_ROOT_USER}
      - MINIO_ROOT_PASSWORD=${MINIO_ROOT_PASSWORD}
    volumes:
      - minio_data:/data
    command: server /data --console-address ":9001"
    networks:
      - eduverse-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  # WebRTC Signaling Server
  webrtc-signaling:
    build:
      context: ../webrtc
      dockerfile: Dockerfile
    container_name: eduverse_webrtc_signaling
    ports:
      - "3001:3001"
    environment:
      - NODE_ENV=production
      - REDIS_URL=redis://redis-cluster:6379
      - JWT_SECRET=${SECRET_KEY}
    depends_on:
      - redis-cluster
    networks:
      - eduverse-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 2G

  # AI Model Server
  ai-model-server:
    build:
      context: ../ai_models
      dockerfile: Dockerfile
    container_name: eduverse_ai_models
    ports:
      - "8001:8001"
    environment:
      - MODEL_CACHE_DIR=/models
      - GPU_ENABLED=true
      - CUDA_VISIBLE_DEVICES=0
    volumes:
      - ../models:/models
      - ai_model_cache:/cache
    networks:
      - eduverse-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 8G
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]

  # Log Aggregator (Fluentd)
  fluentd:
    build:
      context: ./fluentd
      dockerfile: Dockerfile
    container_name: eduverse_fluentd
    volumes:
      - ./fluentd/fluent.conf:/fluentd/etc/fluent.conf:ro
      - ../logs:/var/log/eduverse:ro
    ports:
      - "24224:24224"
      - "24224:24224/udp"
    depends_on:
      - elasticsearch
    networks:
      - eduverse-network
    restart: unless-stopped

  # Backup Service
  backup:
    build:
      context: ./backup
      dockerfile: Dockerfile
    container_name: eduverse_backup
    environment:
      - POSTGRES_HOST=postgres-primary
      - POSTGRES_DB=eduverse
      - POSTGRES_USER=eduverse_user
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - S3_BUCKET=${BACKUP_S3_BUCKET}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
    volumes:
      - ../backups:/backups
      - postgres_primary_data:/var/lib/postgresql/data:ro
    depends_on:
      - postgres-primary
    networks:
      - eduverse-network
    restart: unless-stopped

  # Security Scanner
  security-scanner:
    image: aquasec/trivy:latest
    container_name: eduverse_security_scanner
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./security:/security
    command: ["server", "--listen", "0.0.0.0:4954"]
    ports:
      - "4954:4954"
    networks:
      - eduverse-network
    restart: unless-stopped

volumes:
  postgres_primary_data:
    driver: local
  postgres_replica_data:
    driver: local
  redis_cluster_data:
    driver: local
  elasticsearch_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  jaeger_data:
    driver: local
  minio_data:
    driver: local
  ai_model_cache:
    driver: local

networks:
  eduverse-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16