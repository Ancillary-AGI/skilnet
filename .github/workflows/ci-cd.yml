name: EduVerse CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  PYTHON_VERSION: '3.11'
  FLUTTER_VERSION: '3.16.0'
  NODE_VERSION: '18'

jobs:
  # Backend Testing
  backend-test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_eduverse
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        cd backend
        pip install -r requirements.txt
        pip install pytest-xdist pytest-benchmark
    
    - name: Run linting
      run: |
        cd backend
        black --check .
        isort --check-only .
        flake8 .
        mypy .
    
    - name: Run security checks
      run: |
        cd backend
        pip install bandit safety
        bandit -r app/
        safety check
    
    - name: Run tests with coverage
      env:
        DATABASE_URL: postgresql+asyncpg://postgres:postgres@localhost:5432/test_eduverse
        REDIS_URL: redis://localhost:6379
        SECRET_KEY: test-secret-key
      run: |
        cd backend
        pytest --cov=app --cov-report=xml --cov-report=html -v --tb=short
    
    - name: Run performance tests
      env:
        DATABASE_URL: postgresql+asyncpg://postgres:postgres@localhost:5432/test_eduverse
        REDIS_URL: redis://localhost:6379
        SECRET_KEY: test-secret-key
      run: |
        cd backend
        pytest tests/test_performance.py --benchmark-only
    
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./backend/coverage.xml
        flags: backend
        name: backend-coverage

  # Frontend Testing
  frontend-test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: ${{ env.FLUTTER_VERSION }}
        cache: true
    
    - name: Install dependencies
      run: |
        cd frontend
        flutter pub get
    
    - name: Run code analysis
      run: |
        cd frontend
        flutter analyze
    
    - name: Run unit tests
      run: |
        cd frontend
        flutter test --coverage
    
    - name: Run integration tests
      run: |
        cd frontend
        flutter test integration_test/
    
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./frontend/coverage/lcov.info
        flags: frontend
        name: frontend-coverage

  # Security Scanning
  security-scan:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'
    
    - name: Run CodeQL Analysis
      uses: github/codeql-action/init@v2
      with:
        languages: python, javascript
    
    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v2

  # Build and Push Docker Images
  build-and-push:
    runs-on: ubuntu-latest
    needs: [backend-test, frontend-test, security-scan]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
    
    - name: Build and push backend image
      uses: docker/build-push-action@v5
      with:
        context: ./backend
        target: production
        push: true
        tags: |
          eduverse/backend:latest
          eduverse/backend:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Build and push frontend image
      uses: docker/build-push-action@v5
      with:
        context: ./frontend
        target: production
        push: true
        tags: |
          eduverse/frontend:latest
          eduverse/frontend:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # Deploy to Staging
  deploy-staging:
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Deploy to staging
      run: |
        echo "Deploying to staging environment..."
        # Add deployment commands here
    
    - name: Run smoke tests
      run: |
        echo "Running smoke tests on staging..."
        # Add smoke test commands here
    
    - name: Notify team
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        channel: '#deployments'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}

  # Deploy to Production
  deploy-production:
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Deploy to production
      run: |
        echo "Deploying to production environment..."
        # Add production deployment commands here
    
    - name: Run health checks
      run: |
        echo "Running production health checks..."
        # Add health check commands here
    
    - name: Update monitoring
      run: |
        echo "Updating monitoring dashboards..."
        # Add monitoring update commands here
    
    - name: Notify team
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        channel: '#deployments'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}

  # Performance Testing
  performance-test:
    runs-on: ubuntu-latest
    needs: deploy-staging
    if: github.ref == 'refs/heads/develop'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
    
    - name: Install k6
      run: |
        sudo gpg -k
        sudo gpg --no-default-keyring --keyring /usr/share/keyrings/k6-archive-keyring.gpg --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C5AD17C747E3415A3642D57D77C6C491D6AC1D69
        echo "deb [signed-by=/usr/share/keyrings/k6-archive-keyring.gpg] https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
        sudo apt-get update
        sudo apt-get install k6
    
    - name: Run load tests
      run: |
        cd performance_tests
        k6 run --out json=results.json load_test.js
    
    - name: Analyze performance results
      run: |
        cd performance_tests
        python analyze_results.py results.json
    
    - name: Upload performance report
      uses: actions/upload-artifact@v3
      with:
        name: performance-report
        path: performance_tests/report.html

  # Accessibility Testing
  accessibility-test:
    runs-on: ubuntu-latest
    needs: frontend-test
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
    
    - name: Install accessibility testing tools
      run: |
        npm install -g @axe-core/cli lighthouse-ci
    
    - name: Build Flutter web
      uses: subosito/flutter-action@v2
      with:
        flutter-version: ${{ env.FLUTTER_VERSION }}
    
    - name: Build web app
      run: |
        cd frontend
        flutter build web
    
    - name: Serve web app
      run: |
        cd frontend/build/web
        python -m http.server 8080 &
        sleep 5
    
    - name: Run accessibility tests
      run: |
        axe http://localhost:8080 --save accessibility-report.json
        lhci autorun
    
    - name: Upload accessibility report
      uses: actions/upload-artifact@v3
      with:
        name: accessibility-report
        path: accessibility-report.json

  # Mobile App Testing (Android)
  android-test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Java
      uses: actions/setup-java@v3
      with:
        distribution: 'zulu'
        java-version: '17'
    
    - name: Set up Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: ${{ env.FLUTTER_VERSION }}
    
    - name: Install dependencies
      run: |
        cd frontend
        flutter pub get
    
    - name: Run Android integration tests
      uses: reactivecircus/android-emulator-runner@v2
      with:
        api-level: 33
        target: google_apis
        arch: x86_64
        profile: Nexus 6
        script: |
          cd frontend
          flutter test integration_test/ -d android

  # iOS App Testing
  ios-test:
    runs-on: macos-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: ${{ env.FLUTTER_VERSION }}
    
    - name: Install dependencies
      run: |
        cd frontend
        flutter pub get
    
    - name: Run iOS integration tests
      run: |
        cd frontend
        flutter test integration_test/ -d ios

  # Documentation Generation
  generate-docs:
    runs-on: ubuntu-latest
    needs: [backend-test, frontend-test]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install documentation tools
      run: |
        pip install sphinx sphinx-rtd-theme
        npm install -g @apidevtools/swagger-parser
    
    - name: Generate API documentation
      run: |
        cd backend
        python -c "
        from app.main import app
        import json
        with open('openapi.json', 'w') as f:
            json.dump(app.openapi(), f, indent=2)
        "
    
    - name: Generate code documentation
      run: |
        cd docs
        sphinx-build -b html source build
    
    - name: Deploy documentation
      uses: peaceiris/actions-gh-pages@v3
      if: github.ref == 'refs/heads/main'
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./docs/build

  # Dependency Security Audit
  dependency-audit:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Audit Python dependencies
      run: |
        cd backend
        pip install safety
        safety check
    
    - name: Audit Flutter dependencies
      run: |
        cd frontend
        flutter pub deps --json | jq '.packages[] | select(.kind == "direct")' > dependencies.json
        # Add custom security checks for Flutter packages
    
    - name: Check for known vulnerabilities
      run: |
        # Add vulnerability database checks
        echo "Checking for known vulnerabilities..."

  # License Compliance
  license-check:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Check Python license compliance
      run: |
        cd backend
        pip install pip-licenses
        pip-licenses --format=json --output-file=licenses.json
    
    - name: Check Flutter license compliance
      run: |
        cd frontend
        flutter pub deps --json > flutter_deps.json
        # Add license extraction for Flutter packages
    
    - name: Validate licenses
      run: |
        # Add license validation logic
        echo "Validating license compliance..."

  # Database Migration Testing
  migration-test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: migration_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      run: |
        cd backend
        pip install -r requirements.txt
    
    - name: Test database migrations
      env:
        DATABASE_URL: postgresql+asyncpg://postgres:postgres@localhost:5432/migration_test
      run: |
        cd backend
        alembic upgrade head
        alembic downgrade base
        alembic upgrade head
    
    - name: Test migration rollback safety
      env:
        DATABASE_URL: postgresql+asyncpg://postgres:postgres@localhost:5432/migration_test
      run: |
        cd backend
        python scripts/test_migration_safety.py

  # API Contract Testing
  api-contract-test:
    runs-on: ubuntu-latest
    needs: backend-test
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
    
    - name: Install Pact CLI
      run: npm install -g @pact-foundation/pact-cli
    
    - name: Run contract tests
      run: |
        cd api_tests
        npm install
        npm run test:contract
    
    - name: Publish Pact contracts
      run: |
        pact-broker publish pacts --consumer-app-version=${{ github.sha }} --broker-base-url=${{ secrets.PACT_BROKER_URL }}

  # End-to-End Testing
  e2e-test:
    runs-on: ubuntu-latest
    needs: [backend-test, frontend-test]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up test environment
      run: |
        docker-compose -f docker-compose.test.yml up -d
        sleep 30  # Wait for services to start
    
    - name: Set up Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: ${{ env.FLUTTER_VERSION }}
    
    - name: Run E2E tests
      run: |
        cd frontend
        flutter drive --driver=test_driver/integration_test.dart --target=integration_test/app_test.dart
    
    - name: Cleanup test environment
      run: |
        docker-compose -f docker-compose.test.yml down -v

  # Deployment
  deploy:
    runs-on: ubuntu-latest
    needs: [backend-test, frontend-test, security-scan, e2e-test]
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Deploy to Kubernetes
      run: |
        echo "Deploying to Kubernetes cluster..."
        # Add Kubernetes deployment commands
    
    - name: Update CDN
      run: |
        echo "Updating CDN with new static assets..."
        # Add CDN update commands
    
    - name: Run post-deployment tests
      run: |
        echo "Running post-deployment health checks..."
        # Add health check commands
    
    - name: Notify deployment success
      uses: 8398a7/action-slack@v3
      with:
        status: success
        channel: '#deployments'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        message: 'EduVerse successfully deployed to production! 🚀'

  # Monitoring Setup
  setup-monitoring:
    runs-on: ubuntu-latest
    needs: deploy
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Update monitoring dashboards
      run: |
        echo "Updating Grafana dashboards..."
        # Add monitoring setup commands
    
    - name: Configure alerts
      run: |
        echo "Configuring production alerts..."
        # Add alert configuration commands
    
    - name: Test monitoring endpoints
      run: |
        echo "Testing monitoring endpoints..."
        # Add monitoring tests